//
//  FoundLocScenario.swift
//  WhatToEat
//
//  Created by YuCheng on 2021/2/20.
//  Copyright Â© 2021 YuCheng. All rights reserved.
//

import Foundation
import Flynn
import ReSwift

class FoundLocScenario: Actor {
    
    private func _beCollectParcel(
        _ complete: @escaping (
            [GQInputObject]) -> Void) {
        LogisticsCenter.shared.collectParcels(recipient: self) { (parcelSet) in
            guard parcelSet?.count ?? 0 > 0 else {
                return}
            for parcel in parcelSet! {
                let parcelItem = parcel as! Parcel
                if let content = parcelItem.content as? [GQInputObject] {
                    complete(content)
                }
            }
        }
    }
    private func _bePrepareNewParcel(inputObj: GQInputObject) {
        var newData = initGQInputObject()
        newData.address = inputObj.address
        _bePackageParcel(inputObj: newData)
    }
    private func _bePackageParcel(inputObj: GQInputObject) {
        _ = LogisticsCenter.shared.applyExpressService(
            sender: self, recipient: "AddGourmetScenario",
            content: inputObj)
    }
}

// MARK: - Autogenerated by FlynnLint
// Contents of file after this marker will be overwritten as needed

extension FoundLocScenario {

    @discardableResult
    public func beCollectParcel(_ complete: @escaping (
            [GQInputObject]) -> Void) -> Self {
        unsafeSend { self._beCollectParcel(complete) }
        return self
    }
    @discardableResult
    public func bePrepareNewParcel(inputObj: GQInputObject) -> Self {
        unsafeSend { self._bePrepareNewParcel(inputObj: inputObj) }
        return self
    }
    @discardableResult
    public func bePackageParcel(inputObj: GQInputObject) -> Self {
        unsafeSend { self._bePackageParcel(inputObj: inputObj) }
        return self
    }

}
