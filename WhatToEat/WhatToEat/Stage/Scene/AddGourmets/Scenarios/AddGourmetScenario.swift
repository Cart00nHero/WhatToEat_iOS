//
//  AddGourmetScenario.swift
//  WhatToEat
//
//  Created by YuCheng on 2021/2/14.
//  Copyright Â© 2021 YuCheng. All rights reserved.
//

import Foundation
import Flynn

struct DropDownMenuData
{
    let typeSource = ["Unclassified",
                      "Bar","Breakfast","Boxed meal","Buffet",
                      "Cafe","Cafeteria",
                      "Diner","Drink",
                      "Fast food","Food court","Food stall",
                      "Prix fixe","Pizzeria"]
    let styleSource = ["Unclassified","AFR","EURO","LAME",
                       "CHN","DEU","ESP","GBR","FRA","HKG",
                       "IND","JPN","KOR","MEX","THA",
                       "TWN","USA","VNM"]
}

// MARK: - AddGourmetScenario
class AddGourmetScenario: Actor {
    private var queryData = initGQInputObject()
    private func _beCollectGQInputParcel() {
        Courier().beClaim(recipient: self) { [self] parcelSet in
            guard parcelSet.count > 0 else {return}
            for parcel in parcelSet {
                if let parcelItem = parcel as? Parcel<GQInputObject> {
                    queryData = parcelItem.content
                }
            }
        }
    }
    private func _beGetInputData(
        _ complete: @escaping (GQInputObject) -> Void) {
        complete(queryData)
    }
    private func _beUpdateInputData(newText: String, indexPath: IndexPath) {
        var newInput = queryData
        if indexPath.section == 0 {
            var branch = queryData.shopBranch
            switch indexPath.row {
            case 0:
                branch.title = newText
            case 1:
                branch.subtitle = newText
            case 2:
                branch.underPrice = Float64(newText)
            case 3:
                branch.tel = newText
            default: break
            }
            newInput.shopBranch = branch
        }
        if indexPath.section == 1 {
            var inAddress = queryData.address
            switch indexPath.row {
            case 1:
                inAddress.floor = newText
            default:
                inAddress.room = newText
            }
            newInput.address = inAddress
        }
        queryData = newInput
    }
}

// MARK: - Autogenerated by FlynnLint
// Contents of file after this marker will be overwritten as needed

extension AddGourmetScenario {

    @discardableResult
    public func beCollectGQInputParcel() -> Self {
        unsafeSend(_beCollectGQInputParcel)
        return self
    }
    @discardableResult
    public func beGetInputData(_ complete: @escaping (GQInputObject) -> Void) -> Self {
        unsafeSend { self._beGetInputData(complete) }
        return self
    }
    @discardableResult
    public func beUpdateInputData(newText: String, indexPath: IndexPath) -> Self {
        unsafeSend { self._beUpdateInputData(newText: newText, indexPath: indexPath) }
        return self
    }

}
