//
//  SignScenario.swift
//  WhatToEat
//
//  Created by YuCheng on 2021/3/13.
//  Copyright Â© 2021 YuCheng. All rights reserved.
//

import Foundation
import Flynn
import UIKit
import AuthenticationServices

class SignScenario: Actor {
    
    private let fbDoorman = FBDoorman()
    private var appleDoorman: AppleDoorman?
    
    // MARK: - Apple
    private func _beSignWithApple(vc: UIViewController) {
        let doorMan = AppleDoorman(sender: self, currentVC: vc)
        appleDoorman = doorMan
        let currentId = getStoredFoodieId()
        if currentId.count == 0 {
            doorMan.beSignWithApple()
            return
        }
        let appleUID = getAppleUID()
        if appleUID.count == 0 {
            doorMan.beSignWithApple()
        } else {
            doorMan.beCheckAuthorization(
                sender: self, appleUID: appleUID) { (state) in
                switch state {
                case .authorized:
                    SingletonStorage.shared.foodieId = currentId
                    DispatchQueue.main.async {
                        appStore.dispatch(GoMenuSeceneAction())
                    }
                default:
                    doorMan.beSignWithApple()
                }
            }
        }
        
    }
    // MARK: - Facebook
    private func _beFBCheckIfNeedSign(vc: UIViewController) {
        fbDoorman.beCheckAccessToken(sender: self) { [self] (isExpired) in
            let currentId = getStoredFoodieId()
            if currentId.count == 0 {
                doFBLogin(vc: vc)
                return
            }
            if isExpired {
                doFBLogin(vc: vc)
            } else {
                SingletonStorage.shared.foodieId = currentId
                DispatchQueue.main.async {
                    appStore.dispatch(GoMenuSeceneAction())
                }
            }
        }
    }
    private func doFBLogin(vc: UIViewController) {
        fbDoorman.beFacebookLogin(sender: self, vc: vc) { [self] (status, token) in
            switch status {
            case .Success:
                fbDoorman.beCurrentProfile(sender: self) { (file) in
                    let authObj = AuthObject(
                        facebook: FacebookObject(
                            email: file.email ?? "", token: token))
                    
                    let signData =
                        SignData(
                            auth: authObj, email: file.email, name: file.name ?? "")
                    DispatchQueue.main.async {
                        appStore.dispatch(signFoodieAction(signData: signData))
                    }
                }
            default:
                print("Failed")
            }
        }
    }
    private func getStoredFoodieId() -> String {
        return UserDefaults.standard.object(
            forKey: "Signed_Foodie_Id") as? String ?? ""
    }
    private func getAppleUID() -> String {
        return UserDefaults.standard.object(
            forKey: "Apple_UID") as? String ?? ""
    }
}
// MARK: - AppleDoormanProtocol
extension SignScenario: AppleDoormanProtocol {
    private func _beAuthorizationController(controller: ASAuthorizationController, didCompleteWithAuthorization authorization: ASAuthorization) {
        switch authorization.credential {
        case let credential as ASAuthorizationAppleIDCredential:
            let userId = credential.user
            UserDefaults.standard.setValue(userId, forKeyPath: "Apple_UID")
            let authObj = AuthObject(
                apple: AppleObject(email:credential.email, uid: userId))
            let signData = SignData(
                appleUid: userId,
                auth: authObj,
                name: credential.fullName?.nickname ?? "")
            appStore.dispatch(signWithAppleAction(signData: signData))
        default: break
        }
    }
}
// MARK: - Autogenerated by FlynnLint
// Contents of file after this marker will be overwritten as needed

extension SignScenario {

    @discardableResult
    public func beSignWithApple(vc: UIViewController) -> Self {
        unsafeSend { self._beSignWithApple(vc: vc) }
        return self
    }
    @discardableResult
    public func beFBCheckIfNeedSign(vc: UIViewController) -> Self {
        unsafeSend { self._beFBCheckIfNeedSign(vc: vc) }
        return self
    }
    @discardableResult
    public func beAuthorizationController(controller: ASAuthorizationController, didCompleteWithAuthorization authorization: ASAuthorization) -> Self {
        unsafeSend { self._beAuthorizationController(controller: controller, didCompleteWithAuthorization: authorization) }
        return self
    }

}
