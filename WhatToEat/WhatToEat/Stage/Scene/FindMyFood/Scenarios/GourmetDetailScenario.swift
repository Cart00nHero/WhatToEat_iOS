//
//  GourmetDetailScenario.swift
//  WhatToEat
//
//  Created by YuCheng on 2021/2/22.
//  Copyright Â© 2021 YuCheng. All rights reserved.
//

import Foundation
import Flynn
import CoreLocation
import UIKit

class GourmetDetailScenario: Actor {
    private func _beCollectParcel(
        _ complete: @escaping (
            LocationsDynamicQueryQuery.Data.LocationsDynamicQuery) -> Void) {
        LogisticsCenter.shared.collectParcels(recipient: self) { (parcelSet) in
            guard parcelSet?.count ?? 0 > 0 else {
                return}
            for parcel in parcelSet! {
                let parcelItem = parcel as! Parcel
                if let content = parcelItem.content as? LocationsDynamicQueryQuery.Data.LocationsDynamicQuery {
                    complete(content)
                }
            }
        }
    }
    private func _beResizeUpdateButtonImage(
        origin:UIImage, _ complete: @escaping (UIImage) -> Void) {
        ToolMan().beResizeImage(
            sender: self, image: origin, width: 44.0) { (newImage) in
            DispatchQueue.main.async {
                complete(newImage)
            }
        }
    }
    private func _bePackageLocation(
        latitude: CLLocationDegrees,longitude: CLLocationDegrees,
        _ complete: @escaping () -> Void) {
        let parcelLoc =
            CLLocation(latitude: latitude, longitude: longitude)
        _ = LogisticsCenter.shared.applyExpressService(sender: self, recipient: "FindFoodScenario", content: parcelLoc)
        DispatchQueue.main.async {
            complete()
        }
    }
    private func _bePackageUpdateData(
        data: LocationsDynamicQueryQuery.Data.LocationsDynamicQuery?,
        _ complete: @escaping () -> Void) {
        DataManager().beConvertLocDQDataToGQInput(self, [data]) { (inputObjs) in
            if inputObjs.count > 0 {
                let updateObj = inputObjs.first
                _ = LogisticsCenter.shared.applyExpressService(
                    sender: self, recipient: "AddGourmetScenario", content: updateObj)
                DispatchQueue.main.async {
                    complete()
                }
            }
        }
    }
}

// MARK: - Autogenerated by FlynnLint
// Contents of file after this marker will be overwritten as needed

extension GourmetDetailScenario {

    @discardableResult
    public func beCollectParcel(_ complete: @escaping (
            LocationsDynamicQueryQuery.Data.LocationsDynamicQuery) -> Void) -> Self {
        unsafeSend { self._beCollectParcel(complete) }
        return self
    }
    @discardableResult
    public func beResizeUpdateButtonImage(origin: UIImage, _ complete: @escaping (UIImage) -> Void) -> Self {
        unsafeSend { self._beResizeUpdateButtonImage(origin: origin, complete) }
        return self
    }
    @discardableResult
    public func bePackageLocation(latitude: CLLocationDegrees, longitude: CLLocationDegrees, _ complete: @escaping () -> Void) -> Self {
        unsafeSend { self._bePackageLocation(latitude: latitude, longitude: longitude, complete) }
        return self
    }
    @discardableResult
    public func bePackageUpdateData(data: LocationsDynamicQueryQuery.Data.LocationsDynamicQuery?, _ complete: @escaping () -> Void) -> Self {
        unsafeSend { self._bePackageUpdateData(data: data, complete) }
        return self
    }

}
