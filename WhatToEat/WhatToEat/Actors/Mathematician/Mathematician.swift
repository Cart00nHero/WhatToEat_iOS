//
//  Mathematician.swift
//  WhatToEat
//
//  Created by YuCheng on 2021/2/11.
//  Copyright Â© 2021 YuCheng. All rights reserved.
//

import Foundation
import Flynn
import MapKit

class Mathematician: Actor {
    private func _beCalculateRange(
        _ sender: Actor,_ coordinate: CLLocationCoordinate2D,
        _ range: Float64,_ complete: @escaping (GQSearchRange) -> Void) {
        let result =
            Haversine().calculateRange(coordinate: coordinate, range: range)
        sender.unsafeSend {
            complete(result)
        }
    }
    private func _beCalculateCoordinateDistance(
        _ sender: Actor,from: CLLocationCoordinate2D,
        to: CLLocationCoordinate2D,
        _ complete: @escaping (CLLocationDistance) -> Void) {
        let fromLoc = CLLocation(latitude: from.latitude, longitude: from.longitude)
        let toLoc = CLLocation(latitude: to.latitude, longitude: to.longitude)
        sender.unsafeSend {
            complete(toLoc.distance(from: fromLoc))
        }
    }
    private func _beRandomNumber(
        sender: Actor,min: Int,max: Int,
        _ complete: @escaping (Int) -> Void) {
        let result = randomInt(min: min, max: max)
        sender.unsafeSend {
            complete(result)
        }
    }
}

// MARK: - Autogenerated by FlynnLint
// Contents of file after this marker will be overwritten as needed

extension Mathematician {

    @discardableResult
    public func beCalculateRange(_ sender: Actor, _ coordinate: CLLocationCoordinate2D, _ range: Float64, _ complete: @escaping (GQSearchRange) -> Void) -> Self {
        unsafeSend { self._beCalculateRange(sender, coordinate, range, complete) }
        return self
    }
    @discardableResult
    public func beCalculateCoordinateDistance(_ sender: Actor, from: CLLocationCoordinate2D, to: CLLocationCoordinate2D, _ complete: @escaping (CLLocationDistance) -> Void) -> Self {
        unsafeSend { self._beCalculateCoordinateDistance(sender, from: from, to: to, complete) }
        return self
    }
    @discardableResult
    public func beRandomNumber(sender: Actor, min: Int, max: Int, _ complete: @escaping (Int) -> Void) -> Self {
        unsafeSend { self._beRandomNumber(sender: sender, min: min, max: max, complete) }
        return self
    }

}
