//
//  FBDoorman.swift
//  WhatToEat
//
//  Created by YuCheng on 2021/3/12.
//  Copyright Â© 2021 YuCheng. All rights reserved.
//

import Foundation
import Flynn
import FBSDKLoginKit
import UIKit

enum LoginActionStatus {
    case Success, Failed, Cancelled
}
class FBDoorman: Actor {
    
    private func _beCheckAccessToken(
        sender: Actor,_ complete: @escaping (Bool) -> Void) {
        if let token = AccessToken.current, !token.isExpired {
            sender.unsafeSend {
                complete(false)
            }
        } else {
            sender.unsafeSend {
                complete(true)
            }
        }
    }
    
    private func _beFacebookLogin(
        sender: Actor,vc: UIViewController,
        _ complete: @escaping (
            _ status:LoginActionStatus,_ token: String) -> Void) {
        let loginManager = LoginManager()
        DispatchQueue.main.async {
            loginManager.logIn(permissions: ["public_profile", "email"], from: vc) { (result, error) in
                if error != nil {
                    sender.unsafeSend {
                        complete(.Failed,"")
                    }
                    return
                }
                if result?.isCancelled != nil {
                    if result?.token?.tokenString != nil {
                        sender.unsafeSend {
                            complete(.Success,result?.token?.tokenString ?? "")
                        }
                        return
                    }
                    sender.unsafeSend {
                        complete(.Cancelled,"")
                    }
                    return
                }
                if result?.token?.tokenString != nil {
                    sender.unsafeSend {
                        complete(.Success,result?.token?.tokenString ?? "")
                    }
                }
            }
        }
    }
    
    private func _beCurrentProfile(
        sender: Actor,_ complete:@escaping (Profile) -> Void) {
        Profile.loadCurrentProfile { (profile, error) in
            if error == nil && profile != nil {
                sender.unsafeSend {
                    complete(profile!)
                }
            }
        }
    }
    
}

// MARK: - Autogenerated by FlynnLint
// Contents of file after this marker will be overwritten as needed

extension FBDoorman {

    @discardableResult
    public func beCheckAccessToken(sender: Actor, _ complete: @escaping (Bool) -> Void) -> Self {
        unsafeSend { self._beCheckAccessToken(sender: sender, complete) }
        return self
    }
    @discardableResult
    public func beFacebookLogin(sender: Actor, vc: UIViewController, _ complete: @escaping (
            _ status:LoginActionStatus,_ token: String) -> Void) -> Self {
        unsafeSend { self._beFacebookLogin(sender: sender, vc: vc, complete) }
        return self
    }
    @discardableResult
    public func beCurrentProfile(sender: Actor, _ complete: @escaping (Profile) -> Void) -> Self {
        unsafeSend { self._beCurrentProfile(sender: sender, complete) }
        return self
    }

}
