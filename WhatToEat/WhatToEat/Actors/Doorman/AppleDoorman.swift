//
//  AppleDoorman.swift
//  WhatToEat
//
//  Created by YuCheng on 2021/3/22.
//

import Foundation

import Flynn
import AuthenticationServices

protocol AppleDoormanProtocol {
    @discardableResult
    func beAuthorizationController(controller: ASAuthorizationController, didCompleteWithAuthorization authorization: ASAuthorization) -> Self
}
fileprivate class AppleSignService:
    NSObject,ASAuthorizationControllerDelegate,
    ASAuthorizationControllerPresentationContextProviding {
    private var delegate: AppleDoormanProtocol
    private var currentVC: UIViewController
    init(sender: AppleDoormanProtocol,
         currentVC: UIViewController) {
        self.currentVC = currentVC
        self.delegate = sender
    }
    func createASAuthorizationController() {
        let request =
            ASAuthorizationAppleIDProvider().createRequest()
        request.requestedScopes = [.email,.fullName]
        let appleAuthVC =
            ASAuthorizationController(authorizationRequests: [request])
        appleAuthVC.delegate = self
        appleAuthVC.presentationContextProvider = self
        appleAuthVC.performRequests()
    }
    // MARK: - ASAuthorizationControllerPresentationContextProviding
    func presentationAnchor(for controller: ASAuthorizationController) -> ASPresentationAnchor {
        return currentVC.view.window!
    }
    // MARK: - ASAuthorizationControllerDelegate
    func authorizationController(controller: ASAuthorizationController, didCompleteWithAuthorization authorization: ASAuthorization) {
        delegate.beAuthorizationController(controller: controller, didCompleteWithAuthorization: authorization)
    }
}
class AppleDoorman: Actor {
    private let service: AppleSignService
    init(sender: AppleDoormanProtocol,
         currentVC: UIViewController) {
        service = AppleSignService(sender: sender, currentVC: currentVC)
    }
    private func _beCheckAuthorization(
        sender: Actor,appleUID: String,_ complete: @escaping (ASAuthorizationAppleIDProvider.CredentialState) -> Void) {
        let provider = ASAuthorizationAppleIDProvider()
        provider.getCredentialState(forUserID: appleUID) { (state, error) in
            if error == nil {
                sender.unsafeSend {
                    complete(state)
                }
            } else {
                print(error.debugDescription)
            }
        }
    }
    private func _beSignWithApple() {
        DispatchQueue.main.async { [self] in
            service.createASAuthorizationController()
        }
    }
}

// MARK: - Autogenerated by FlynnLint
// Contents of file after this marker will be overwritten as needed

extension AppleDoorman {

    @discardableResult
    public func beCheckAuthorization(sender: Actor, appleUID: String, _ complete: @escaping (ASAuthorizationAppleIDProvider.CredentialState) -> Void) -> Self {
        unsafeSend { self._beCheckAuthorization(sender: sender, appleUID: appleUID, complete) }
        return self
    }
    @discardableResult
    public func beSignWithApple() -> Self {
        unsafeSend(_beSignWithApple)
        return self
    }

}
