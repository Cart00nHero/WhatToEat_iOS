//
//  Courier.swift
//  WhatToEat
//
//  Created by YuCheng on 2021/2/11.
//  Copyright Â© 2021 YuCheng. All rights reserved.
//

import Foundation
import Flynn

class Courier: Actor {
    private var courierBag: [String: NSSet] = [:]
    
    private func _beClaimParcel(_ recipient: String,_ parcel: Parcel) {
        var parcelSet: NSMutableSet
        if courierBag[recipient] == nil {
            parcelSet = NSMutableSet()
        } else {
            parcelSet = courierBag[recipient]?.mutableCopy() as! NSMutableSet
        }
        if !parcelSet.contains(parcel) {
            parcelSet.add(parcel)
            courierBag[recipient] = parcelSet
        }
    }
    
    private func _beCollect(
        _ recipient: Actor,
        _ complete: @escaping (NSSet?) -> Void) {
        let key = String(describing: type(of: recipient))
        let parcelSet = courierBag[key] ?? NSSet()
        courierBag.removeValue(forKey: key)
        recipient.unsafeSend {
            complete(parcelSet)
        }
    }
    private func _beCancel(_ recipient:String, _ parcel: Parcel){
        let parcelSet = courierBag[recipient] ?? NSSet()
        let newSet = NSMutableSet.init(set: parcelSet)
        if newSet.contains(parcel) {
            newSet.remove(parcel)
            if newSet.count == 0 {
                courierBag.removeValue(forKey: recipient)
            } else {
                courierBag[recipient] = newSet
            }
        }
    }
    
    private func _beCleanBag() {
        courierBag.removeAll()
    }
}

// MARK: - Autogenerated by FlynnLint
// Contents of file after this marker will be overwritten as needed

extension Courier {

    @discardableResult
    public func beClaimParcel(_ recipient: String, _ parcel: Parcel) -> Self {
        unsafeSend { self._beClaimParcel(recipient, parcel) }
        return self
    }
    @discardableResult
    public func beCollect(_ recipient: Actor, _ complete: @escaping (NSSet?) -> Void) -> Self {
        unsafeSend { self._beCollect(recipient, complete) }
        return self
    }
    @discardableResult
    public func beCancel(_ recipient: String, _ parcel: Parcel) -> Self {
        unsafeSend { self._beCancel(recipient, parcel) }
        return self
    }
    @discardableResult
    public func beCleanBag() -> Self {
        unsafeSend(_beCleanBag)
        return self
    }

}
