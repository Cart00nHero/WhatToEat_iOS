//
//  GeoCoder.swift
//  WhatToEat
//
//  Created by YuCheng on 2021/2/13.
//  Copyright Â© 2021 YuCheng. All rights reserved.
//

import Foundation
import Flynn
import MapKit

class GeoCoder: Actor {
    private func _beCodeAddress(
        sender: Actor,address: String,
        _ complete: @escaping ([CLPlacemark]?, Error?) -> Void) {
        let geoCoder = CLGeocoder()
        geoCoder.geocodeAddressString(address) { (placemarks, error) in
            sender.unsafeSend {
                complete(placemarks, error)
            }
        }
    }
    private func _beReverseLocation(
        sender: Actor,location: CLLocation,
        _ complete: @escaping ([CLPlacemark]?, Error?) -> Void) {
        let geoCoder = CLGeocoder()
        geoCoder.reverseGeocodeLocation(location) { (placemarks, error) in
            sender.unsafeSend {
                complete(placemarks, error)
            }
        }
    }
    
    private func _beLocalizedReverseLocation(
        sender: Actor,location: CLLocation, localeId: String,
        _ complete: @escaping ([CLPlacemark]?, Error?) -> Void) {
        let locale = Locale(identifier: localeId)
        let geoCoder = CLGeocoder()
        if localeId.isEmpty {
            _beReverseLocation(
                sender: sender, location: location, complete)
            return
        }
        if #available(iOS 11.0, *) {
            geoCoder.reverseGeocodeLocation(
                location, preferredLocale: locale) { (placemarks, error) in
                sender.unsafeSend {
                    complete(placemarks,error)
                }
            }
        } else {
            UserDefaults.standard.set([localeId], forKey: "AppleLanguages")
            geoCoder.reverseGeocodeLocation(location) { (placemarks, error) in
                UserDefaults.standard.removeObject(forKey: "AppleLanguages")
                sender.unsafeSend {
                    complete(placemarks, error)
                }
            }
        }
    }
}

// MARK: - Autogenerated by FlynnLint
// Contents of file after this marker will be overwritten as needed

extension GeoCoder {

    @discardableResult
    public func beCodeAddress(sender: Actor, address: String, _ complete: @escaping ([CLPlacemark]?, Error?) -> Void) -> Self {
        unsafeSend { self._beCodeAddress(sender: sender, address: address, complete) }
        return self
    }
    @discardableResult
    public func beReverseLocation(sender: Actor, location: CLLocation, _ complete: @escaping ([CLPlacemark]?, Error?) -> Void) -> Self {
        unsafeSend { self._beReverseLocation(sender: sender, location: location, complete) }
        return self
    }
    @discardableResult
    public func beLocalizedReverseLocation(sender: Actor, location: CLLocation, localeId: String, _ complete: @escaping ([CLPlacemark]?, Error?) -> Void) -> Self {
        unsafeSend { self._beLocalizedReverseLocation(sender: sender, location: location, localeId: localeId, complete) }
        return self
    }

}
